;-------------------------------------------------------------------------------  
;MOUTON, ALFONSO - LOPEZ, JOSE - MORÁN, MARCOS
    
;Mioelectric signals response goes from 10 to 500Hz, from Nyquist theorem we 
;just need to sample at 1KHz, but we choose to over sampling at a frequency of 2KHz
;Internal clock of 4MHZ PREESCALER: 2 TMR0: 6
;ADC 2uS TAD -Div:8 
    
;-------------------------------------------------------------------------------   
    
    LIST p=16f887
    #include "p16f887.inc"
    
; CONFIG1
; __config 0x20D4
 __CONFIG _CONFIG1, _FOSC_INTRC_NOCLKOUT & _WDTE_OFF & _PWRTE_OFF & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _BOREN_OFF & _IESO_OFF & _FCMEN_OFF & _LVP_OFF
; CONFIG2
; __config 0x3EFF
 __CONFIG _CONFIG2, _BOR4V_BOR21V & _WRT_OFF
    

;CONFIGURATIONS-----------------------------------------------------------------
;Interruptions
CONF_INTCON EQU b'01100000'
CONF_OPTION_REG EQU b'00000101'
;Ports
CONF_TRISA EQU b'00000001'
CONF_TRISB EQU b'11011111'
CONF_TRISD EQU b'11111100'
CONF_TRISC EQU b'00000000'
;Peripherals
CONF_ANSEL EQU b'00000001'
CONF_PIE1 EQU b'01000000'
CONF_PIE2 EQU b'00000000'
CONF_ADCON0 EQU b'01000001'  
CONF_ADCON1 EQU b'10000000'  ;Justify Rigth
;-------------------------------------------------------------------------------
 
DATA_START_ADC EQU 0xA0		;B1
DATA_START_DISPLAY EQU 0x30
 
    CBLOCK 0x20
    N_DATA
    COUNT_DATA_CIRC
    COUNT_MOVING_AVR
    MOVING_AVERAGE_L
    MOVING_AVERAGE_H
    MOVING_AVERAGE_AUXH
    LAST_MOVING_AVERAGE_L
    LAST_MOVING_AVERAGE_H
    UP_THRESHOLD
    DOWN_THRESHOLD
    LAST_W
    LAST_STATUS
    ;DEBUG
    N_DISP
    AUX1
    ENDC
    
;PROGRAM------------------------------------------------------------------------   
    ORG 0x00
    GOTO SETUP
    ORG 0x04
    GOTO ISR
    
    ;TABLAS
DISPLAY_7SEG
    ADDWF PCL,F
    RETLW b'11000000'	;0
    RETLW b'11111001'	;1
    RETLW b'10100100'	;2
    RETLW b'10110000'	;3
    RETLW b'10011001'	;4
    RETLW b'10010010'	;5
    RETLW b'10000010'	;6
    RETLW b'11111000'	;7
    RETLW b'10000000'	;8
    RETLW b'10010000'	;9
    RETLW b'10001000'	;A
    RETLW b'10000011'	;B
    RETLW b'11000110'	;C
    RETLW b'10100001'	;D
    RETLW b'10000110'	;E
    RETLW b'10001110'	;F
CHANGE_DISPLAY
    ADDWF PCL, F
    RETLW b'11111110'
    RETLW b'11111101'
    
SETUP
    BANKSEL ANSEL
    MOVLW CONF_ANSEL
    MOVWF ANSEL
    CLRF ANSELH
    
    BCF STATUS, RP1
    MOVLW CONF_TRISA
    MOVWF TRISA
    MOVLW CONF_TRISB
    MOVWF TRISB
    MOVLW CONF_TRISC
    MOVWF TRISC
    MOVLW CONF_TRISD
    MOVWF TRISD
    MOVLW CONF_PIE1
    MOVWF PIE1
    MOVLW CONF_PIE2
    MOVWF PIE2
    MOVLW CONF_ADCON1
    MOVWF ADCON1
    MOVLW CONF_INTCON
    MOVWF INTCON
    MOVLW CONF_OPTION_REG
    MOVWF OPTION_REG
    
    BCF STATUS, RP0
    BCF STATUS, IRP
    CALL INIT_DISPLAY
    MOVLW CONF_ADCON0
    MOVWF ADCON0
    MOVLW .0
    MOVWF 0x30
    MOVWF 0x31
    MOVWF COUNT_MOVING_AVR
    
    ;Number of data for the filter.
    MOVLW .16
    MOVWF N_DATA
    
    MOVLW .100
    MOVWF TMR0
    BSF INTCON, GIE
LOOP
    GOTO LOOP
    

ISR
    MOVWF LAST_W
    SWAPF STATUS,W 
    MOVWF LAST_STATUS
    
    BTFSC INTCON, T0IF
    GOTO UPDATE
    BTFSC PIR1, ADIF
    GOTO SAVE_ADC_DATA
    
ENDISR
    SWAPF LAST_STATUS, W
    MOVWF STATUS
    SWAPF LAST_W, F
    SWAPF LAST_W, W
    RETFIE
    
;SUBRUTINAS Y FUNCIONES---------------------------------------------------------    
UPDATE
    BSF ADCON0, 1
    BCF INTCON, T0IF
    MOVLW .100
    MOVWF TMR0
    CALL UPDATE_DISPLAY
    
    GOTO ENDISR
    
SAVE_ADC_DATA	    ;Saves ADC_DATA in a Circular Buffer of length N_DATA*2
    BCF PIR1, ADIF
    COMF PORTB, F   ;LED PILOTO
    
    MOVLW DATA_START_ADC
    ADDWF COUNT_DATA_CIRC, W
    MOVWF FSR
    BSF STATUS, RP0
    MOVF ADRESL, W
    MOVWF INDF
    BCF STATUS, RP0
    INCF FSR, F
    MOVF ADRESH, W
    MOVWF INDF
    ;Increments
    INCF COUNT_DATA_CIRC, F
    INCF COUNT_DATA_CIRC, F
    BCF STATUS, C
    RLF N_DATA, W
    SUBWF COUNT_DATA_CIRC, W
    BTFSC STATUS, Z
    CLRF COUNT_DATA_CIRC
    
    CALL COMPUTE_MOVING_AVERAGE
    
    GOTO ENDISR
    
COMPUTE_MOVING_AVERAGE		;Results in MOVING_AVERAGE_H-L
    MOVF MOVING_AVERAGE_H, W
    MOVWF LAST_MOVING_AVERAGE_H
    MOVF MOVING_AVERAGE_L, W
    MOVWF LAST_MOVING_AVERAGE_L
    
    BCF STATUS, C
    RLF N_DATA, W		;N_DATA*2
    MOVWF COUNT_MOVING_AVERAGE
LOOP_SUM
    MOVLW DATA_START_ADC
    ADDWF COUNT_MOVING_AVERAGE, W
    MOVWF FSR
    MOVF INDF, W
    ADDWF MOVING_AVERAGE_L
    BTFSC STATUS, C
    INCF MOVING_AVERAGE_H
    INCF FSR, F
    MOVF INDF, W
    ADDWF MOVING_AVERAGE_H
    BTFSC STATUS, C
    INCF MOVING_AVERAGE_AUXH, F
    
    DECF COUNT_MOVING_AVERAGE, F
    DECFSZ COUNT_MOVING_AVERAGE, F
    GOTO LOOP_SUM
    
    BCF STATUS, C
    RLF N_DATA, W		;N_DATA*2
    MOVWF COUNT_MOVING_AVERAGE
LOOP_DIV
    BCF STATUS, C
    RRF MOVING_AVERAGE_AUXH, F
    RRF MOVING_AVERAGE_H, F
    RRF MOVING_AVERAGE_L, F
    
    DECF COUNT_MOVING_AVERAGE, F
    DECFSZ COUNT_MOVING_AVERAGE, F
    GOTO LOOP_DIV
    CLRF MOVING_AVERAGE_AUXH
    
    RETURN
    
INIT_DISPLAY
    CLRF N_DISP
    MOVLW .0
    CALL CHANGE_DISPLAY
    MOVWF PORTD
    MOVLW .0
    CALL DISPLAY_7SEG
    MOVWF PORTC
    RETURN
    
UPDATE_DISPLAY
    MOVF N_DISP, W
    ADDLW DATA_START_DISPLAY
    MOVWF FSR
    MOVF INDF, W
    CALL DISPLAY_7SEG
    MOVWF PORTC
    ;Multiplexación
    MOVF N_DISP, W
    CALL CHANGE_DISPLAY
    MOVWF PORTD
    INCF N_DISP, F
    MOVF N_DISP, W
    SUBLW .2
    BTFSC STATUS, Z
    CLRF N_DISP
    
    END